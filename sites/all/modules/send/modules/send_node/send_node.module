<?php // $Id$

/**
 * Implementation of hook_menu().
 */
function send_node_menu() {
  return array(
    'admin/settings/send/node' => array(
      'title' => 'Send to friend',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('send_node_admin_settings'),
      'access arguments' => array('administer send'),
      'file' => 'send_node.admin.inc',
      'file path' => drupal_get_path('module', 'send_node') .'/includes',
      'type' => MENU_LOCAL_TASK,
    ),
  );
}

/**
 * Implementation of hook_perm().
 */
function send_node_perm() {
  return array('send nodes');
}

/**
 * Implementation of hook_nodeapi().
 */
function send_node_nodeapi(&$node, $op, $teaser = NULL, $a4 = NULL) {
  if ($op == 'insert' || $op == 'update') {
    require_once (dirname(__FILE__) . '/includes/send_node.admin.inc');
    send_node_admin_nodeapi_save($node, $op, $teaser, $a4);
  }

  if ($op == 'delete') {
    // Delete any send profiles based on this node.
    $name = 'send_node_nid_'. $node->nid;
    return send_profile_delete($name);
    db_query("DELETE FROM {send_profile_node} WHERE nid = %d", $node->nid);
  }
}

/**
 * Implementation of hook_node_type().
 */
function send_node_node_type($op, $info) {
  switch ($op){
    case 'delete':
      // Delete any send profiles based on this node type.
      $name = 'send_node_type_'. $info->type;
      send_profile_delete($name);
      break;

    case 'update':
      // Update the name of any send_profiles based on this node type.
      if (!empty($info->old_type) && $info->old_type != $info->type) {
        if ($profile = send_profile_load('send_node_type_'. $info->old_type)) {
          $profile->set_name('send_node_type_'. $info->type);
          send_profile_save($profile);
        }
      }
      break;
  }
}

/**
 * Implementation of hook_form_alter().
 */
function send_node_form_alter(&$form, &$form_state, $form_id) {
  // Include the send to friend settings form on an individual node.
  if ($form['#id'] == 'node-form') {
    require_once (dirname(__FILE__) . '/includes/send_node.admin.inc');
    send_node_admin_node_form_alter($form, $form_state);
  }

  // Provide general settings for any node type.
  if ($form['#id'] == 'node-type-form') {
    require_once (dirname(__FILE__) . '/includes/send_node.admin.inc');
    send_node_admin_node_type_form_alter($form, $form_state);
  }
}

/**
 * Implementation of hook_menu().
 */
function send_node_theme() {
  module_load_include('theme.inc', 'send_node', 'theme/send_node');
  return send_node_theme_theme();
}

/**
 * Implementation of hook_link().
 */
function send_node_link($type, $node = NULL) {
  if (!$node) return;
  if (!$profile = send_node_profile_load($node)) return;

  if ($profile->enabled && $profile->access()) {
    $href = $profile->url();

    // If we're actually on the send page, don't include the link.
    if (substr($_GET['q'], 0, strlen($href)) == $href) return;

    $profile->addNode($node);
    $linktext = $profile->linktext();
    if ($linktext != '<none>') {
      return array(
        'send_node' => array(
          'title' => $linktext,
          'href'  => $profile->url(),
          'attributes' =>  array(
            'class' => 'send-link send-'. $profile->name(),
            'rel' => 'nofollow',
          ),
        ),
      );
    }
  }
}

/**
 * Load a send profile for a given node.
 */
function send_node_profile_load($node, $send_node = NULL) {
  $suffix = '_'. $node->type;

  // Not enabled at all.
  if (!variable_get('send_enabled'. $suffix, FALSE)) return FALSE;

  // Figured out the name of the default profile.
  $default = 'send_node';
  if (!variable_get('send_default'. $suffix, TRUE)) $default .= '_type'. $suffix;

  // If pernode is enabled, load and configure a possibly-unique profile.
  if (variable_get('send_pernode'. $suffix, FALSE)) {
    if ($node->nid) {

      // Use the per-node settings passed in from the admin form, if available.
      if (!isset($send_node)) {

        // Alternatively, look into the database for stored settings.
        $res = db_query("SELECT * FROM {send_profile_node} 
          WHERE nid = %d", $node->nid);

        // If there was no entry provided or stored, start with some defaults.
        if (!$send_node = db_fetch_object($res)) {
          $send_node = (object) array(
            'nid' => $node->nid,
            'enabled' => 1,
            'use_default' => 1,
          );
        }
      }

      // We're using a default profile.
      if ($send_node->use_default) {
        $profile = send_profile_load($default);
      }

      // We're using a per-node profile.  Load and/or copy the default one.
      else {
        $name = 'send_node_'. $node->nid;
        if (!$profile = send_profile_load($name)) {
          $profile = send_profile_copy($default, $name);
        }
      }

      if ($profile) {
        $profile->setEnabled($send_node->enabled);
        $profile->setDefault($send_node->use_default);
      }
      return $profile;
    }
  }

  // Haven't returned yet?  Let's just return the default value.
  if ($profile = send_profile_load($default)) {
    $profile->setDefault(TRUE);
    $profile->setEnabled(TRUE);
  }
  return $profile;
}

/**
 * Implementation of Send module's hook_send_profile_info().
 */
function send_node_send_profile_info($profile_name = NULL, $options = array()) {
  return array(
    'send_node' => array(
      'title' => t('Send to friend'),
      'mode' => 'mail',
      'from_element' => 'send_contact',
      'to_element' => 'send_contact',
      'message_element' => 'send_message_compose',
      'file' => 'send_node.inc',
      'path' => drupal_get_path('module', 'send_node') .'/includes/handlers',
      'class' => 'SendNodeProfile',
      'parent' => 'send',
    ),
  );
}

/**
 * Implementation of hook_slinky_links_alter().
 */
function send_slinky_share_links_alter(&$links, $node) {
  // Alter the path used for the e-mail share link to use send instead.
  if (isset($links['email'])) {
    if (!$node) return;
    if (!$profile = send_node_profile_load($node)) $links['email']['enabled'] = FALSE;
  
    if ($profile->enabled && $profile->access()) {
      $profile->addNode($node);
      $links['email']['href'] = $profile->url();
      $links['email']['title'] = $profile->linktext();
    }
  }
}
